const buildTree=(t,e=0,r=!1,l="-")=>{if(!t)return[[],0,0,0];let h,o,i=[],u=[],s=r?`${e}${l}${t.value}`:t.value.toString(),n=s.length,f=s.length,[a,g,p,v]=buildTree(t.left,2*e+1,r,l),[_,c,b,d]=buildTree(t.right,2*e+2,r,l),x=0,T=0;g>0?(l_root=Math.floor((p+v)/2)+1,i.push(" ".repeat(l_root+1)),i.push("_".repeat(g-l_root)),u.push(" ".repeat(l_root)+"/"),u.push(" ".repeat(g-l_root)),x=g+1,f+=1):x=0,i.push(s),u.push(" ".repeat(n)),c>0&&(r_root=Math.floor((b+d)/2),i.push("_".repeat(r_root)),i.push(" ".repeat(c-r_root+1)),u.push(" ".repeat(r_root)+"\\"),u.push(" ".repeat(c-r_root)),f+=1),T=x+n-1,new_box=[i.join(""),u.join("")];for(let t=0;t<Math.max(a.length,_.length);t++)h=t<a.length?a[t]:" ".repeat(g),o=t<_.length?_[t]:" ".repeat(c),new_box.push(h+" ".repeat(f)+o);return[new_box,new_box[0].length,x,T]};class Node{constructor(t){this.value=t,this.left=null,this.right=null}}class BinarySearchTree{constructor(){this.root=null,this.length=0}bulkInsert(t){for(let e of t)this.insert(e);return this}insert(t){let e=new Node(t);if(!this.root)return this.root=e,this.length+=1,this;{let r=this.root;for(;;)if(t<r.value){if(!r.left)return r.left=e,this.length+=1,this;r=r.left}else{if(!r.right)return r.right=e,this.length+=1,this;r=r.right}}}search(t){if(!this.root)return!1;let e=this.root;for(;e;)if(t<e.value)e=e.left;else if(t>e.value)e=e.right;else if(t===e.value)return!0;return!1}remove(t){if(!this.root)return!1;let e=this.root,r=null;for(;e;)if(t<e.value)r=e,e=e.left;else if(t>e.value)r=e,e=e.right;else if(t===e.value){if(null===e.right)null===r?this.root=e.left:r.value>e.value?r.left=e.left:r.value<e.value&&(r.right=e.left);else if(null===e.right.left)null===r?this.root=e.left:(e.right.left=e.left,r.value>e.value?r.left=e.right:r.value<e.value&&(r.right=e.right));else{let t=e.right.left,l=e.right;for(;null!==t.left;)l=t,t=t.left;l.left=t.right,t.left=e.left,t.right=e.right,null===r?this.root=t:r.value>e.value?r.left=t:r.value<e.value&&(r.right=t)}return this.length-=1,!0}return!1}print(){let t=buildTree(this.root,0,!1,"-")[0],e="";for(let r of t)e+=r+"\n";return e}}module.exports=BinarySearchTree;